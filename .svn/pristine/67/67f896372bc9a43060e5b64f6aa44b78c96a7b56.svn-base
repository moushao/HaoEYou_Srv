package com.haoeyou.srv.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;

import com.cjj.MaterialRefreshLayout;
import com.cjj.MaterialRefreshListener;
import com.google.gson.Gson;
import com.haoeyou.srv.R;
import com.haoeyou.srv.adapter.ContactsAdapter;
import com.haoeyou.srv.base.BaseActivity;
import com.haoeyou.srv.bean.DoctorRequestBean;
import com.haoeyou.srv.bean.DoctorResponseBean;
import com.haoeyou.srv.bean.Doctors;
import com.haoeyou.srv.event.ItemListener;
import com.haoeyou.srv.fragment.DoctorFragment;
import com.haoeyou.srv.mvp.presenter.BasePresenter;
import com.haoeyou.srv.mvp.presenter.DcotorPresenter;
import com.haoeyou.srv.network.DataCallback;
import com.haoeyou.srv.network.NetWorking;
import com.haoeyou.srv.utils.JsonFormat;
import com.haoeyou.srv.widget.QuickIndexBar;

import java.util.ArrayList;
import java.util.Collections;

import butterknife.Bind;
import ca.barrenechea.widget.recyclerview.decoration.DividerDecoration;
import ca.barrenechea.widget.recyclerview.decoration.StickyHeaderDecoration;
import okhttp3.Call;

public class CardActivity extends BaseActivity {
    private final static String TAG = "CardActivity";
    private Context mContext;
    @Bind(R.id.doctor_recycle)
    RecyclerView mDoctorRecycle;
    @Bind(R.id.qib)
    QuickIndexBar QIBar;
    private ContactsAdapter mDoctorAdapter;
    private LinearLayoutManager manager;
    ArrayList<Doctors> doctorList = new ArrayList<Doctors>();
    @Bind(R.id.refresh)
    MaterialRefreshLayout mRefresh;
    private boolean isLoadingMore = false;
    private String filter = "";
    private int page = 1;

    @Override
    protected int getLayoutId() {
        return R.layout.activity_card;
    }

    @Override
    protected void initInjector() {
        mContext = this;
    }

    @Override
    public BasePresenter getPresenter() {
        return null;
    }

    @Override
    protected void initEventAndData() {
        initRefresh();
        initRecyclerView();
        requestDoctorList();
    }

    private void initRecyclerView() {
        LinearLayoutManager mgrDepart = new LinearLayoutManager(mContext);
        mgrDepart.setOrientation(LinearLayoutManager.VERTICAL);
        setDoctorAdapter();
    }

    private void initRefresh() {
        mRefresh.setWaveColor(0xffffffff);
        mRefresh.setIsOverLay(false);
        mRefresh.setWaveShow(true);
        mRefresh.setLoadMore(true);
        mRefresh.setMaterialRefreshListener(new MaterialRefreshListener() {
            @Override
            public void onRefresh(MaterialRefreshLayout materialRefreshLayout) {
                isLoadingMore = false;
                page = 1;
                requestDoctorList();
            }

            @Override
            public void onRefreshLoadMore(MaterialRefreshLayout materialRefreshLayout) {
                isLoadingMore = true;
                page++;
                requestDoctorList();
            }
        });
    }

    public void setDoctorAdapter() {
        //对集合进行排序
        Collections.sort(doctorList);
        //条目间的间隔线
        DividerDecoration divider = new DividerDecoration.Builder(mContext).setHeight(R.dimen.default_divider_height)
                .setPadding(R.dimen.default_divider_padding).setColorResource(R.color.tou_ming).build();

        manager = new LinearLayoutManager(mContext);

        mDoctorRecycle.setHasFixedSize(true);
        mDoctorRecycle.setLayoutManager(manager);
        mDoctorRecycle.addItemDecoration(divider);

        mDoctorAdapter = new ContactsAdapter(mContext, doctorList, new ItemListener<Doctors>() {
            @Override
            public void onItemClick(View view, int postion, Doctors mdata) {
                Intent itt = new Intent();
                Bundle bundle = new Bundle();
                bundle.putSerializable("CARD_ITEM", doctorList.get(postion));
                itt.putExtras(bundle);
                setResult(Activity.RESULT_OK, itt);
                finish();
            }
        });

        //设置悬浮索引
        StickyHeaderDecoration decor = new StickyHeaderDecoration(mDoctorAdapter);

        mDoctorRecycle.setAdapter(mDoctorAdapter);
        mDoctorRecycle.addItemDecoration(decor, 1);

        //侧拉索引改变监听
        QIBar.setOnLetterChangeListener(new QuickIndexBar.OnLetterChangeListener() {
            @Override
            public void onLetterChange(String letter) {
                for (int i = 0; i < doctorList.size(); i++) {
                    if (letter.equals(doctorList.get(i).getName().charAt(0) + "")) {
                        int position = mDoctorAdapter.getPositionForSection(doctorList.get(i).getName().charAt(0));
                        if (position != -1) {
                            //滑动到指定位置
                            manager.scrollToPositionWithOffset(position, 0);
                        }
                        break;
                    }
                }
            }

            @Override
            public void onReset() {

            }
        });
    }

    private void requestDoctorList() {
        String jsonBean = new Gson().toJson(new DoctorRequestBean("", String.valueOf(page), String.valueOf(page == 1 
                ? 20 : 10)));
        NetWorking.requestNetData("doctor/getDoctorsPage", jsonBean, new DataCallback() {
            @Override
            public void onError(Call call, Exception e, int id) {
                if (isLoadingMore) {
                    page--;
                }
            }

            @Override
            public void onResponse(String response, int id) {
                Log.e("getDoctorsPage", JsonFormat.format(response));
                DoctorResponseBean bean = new Gson().fromJson(response, DoctorResponseBean.class);
                if ("1".equals(bean.getErrorCode())) {
                    getDoctorPageSuccess(bean.getDoctors());
                } else {
                    if (isLoadingMore) {
                        page--;
                    }
                    showBaseMessageDialog(bean.getErrorMsg());
                }
            }
        });
    }

    public void getDoctorPageSuccess(ArrayList<Doctors> mData) {
        if (mRefresh != null) {
            mRefresh.finishRefresh();
            mRefresh.finishRefreshLoadMore();
        }
        if (mData == null || mData.size() == 0)
            return;
        if (doctorList.size() != 0 && !isLoadingMore)
            doctorList.clear();
        doctorList.addAll(mData);
        //对集合进行排序
        Collections.sort(doctorList);
        mDoctorAdapter.notifyDataSetChanged();
    }

}
