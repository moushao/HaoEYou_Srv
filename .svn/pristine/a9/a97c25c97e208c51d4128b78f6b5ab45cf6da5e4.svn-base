package com.haoeyou.srv.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.haoeyou.srv.DemoHelper;
import com.haoeyou.srv.R;
import com.haoeyou.srv.activity.chat.ConversationListFragment;
import com.haoeyou.srv.adapter.DataCompareFragmentAdapter;
import com.haoeyou.srv.base.BaseActivity;
import com.haoeyou.srv.common.Common;
import com.haoeyou.srv.fragment.MainFragment;
import com.haoeyou.srv.fragment.SecondFragment;
import com.haoeyou.srv.mvp.presenter.BasePresenter;
import com.haoeyou.srv.mvp.presenter.MainPresenter;
import com.haoeyou.srv.mvp.view.MainView;
import com.hyphenate.EMMessageListener;
import com.hyphenate.chat.EMClient;
import com.hyphenate.chat.EMConversation;
import com.hyphenate.chat.EMMessage;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class MainActivity extends BaseActivity implements MainView {
    public static final String TAG = "MainActivity";
    @Bind(R.id.pager)
    ViewPager mPager;
    @Bind(R.id.manager_icon)
    ImageView mManagerIcon;
    @Bind(R.id.manager_tv)
    TextView mManagerTv;
    @Bind(R.id.manager_layout)
    LinearLayout mManagerLayout;
    @Bind(R.id.message_icon)
    ImageView mMessageIcon;
    @Bind(R.id.message_tv)
    TextView mMessageTv;
    @Bind(R.id.message_layout)
    LinearLayout mMessageLayout;
    @Bind(R.id.message_red)
    View mRedIcon;
    private Context mContext;
    List<Fragment> fragmentList;
    private int currentTabIndex = 0;
    private ConversationListFragment conversationListFragment;


    @Override
    protected int getLayoutId() {
        return R.layout.activity_main;
    }

    @Override
    protected void initInjector() {
        mContext = this;
        ButterKnife.bind(this);
    }

    @Override
    protected void initEventAndData() {
        onTintStatusBar();
        SetStatusBarColor(Color.parseColor("#426388"));

        initFragmentUI();
    }

    private void initFragmentUI() {
        conversationListFragment = new ConversationListFragment();
        fragmentList = new ArrayList<Fragment>();
        fragmentList.add(new MainFragment());
        fragmentList.add(conversationListFragment);
        DataCompareFragmentAdapter adapter = new DataCompareFragmentAdapter(getSupportFragmentManager(), new 
                String[]{"管理", "消息"}, fragmentList);
        mPager.setAdapter(adapter);
        mPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                currentTabIndex = position;
                if (position == 1) {
                    refreshUIWithMessage();
                }
                changeTabState(position);
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
    }

    @OnClick({R.id.manager_layout, R.id.message_layout})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.manager_layout:
                mPager.setCurrentItem(0);
                changeTabState(0);
                break;
            case R.id.message_layout:
                mPager.setCurrentItem(1);
                changeTabState(1);
                break;
        }
    }

    EMMessageListener messageListener = new EMMessageListener() {

        @Override
        public void onMessageReceived(List<EMMessage> messages) {
            // notify new message
            for (EMMessage message : messages) {
                DemoHelper.getInstance().getNotifier().onNewMsg(message);
            }
            refreshUIWithMessage();
        }

        @Override
        public void onCmdMessageReceived(List<EMMessage> messages) {
            refreshUIWithMessage();
        }

        @Override
        public void onMessageRead(List<EMMessage> messages) {
        }

        @Override
        public void onMessageDelivered(List<EMMessage> message) {
        }

        @Override
        public void onMessageChanged(EMMessage message, Object change) {
        }
    };

    private void changeTabState(int i) {

        switch (i) {
            case 0:
                mManagerIcon.setImageResource(R.drawable.icon_manager);
                mManagerTv.setTextColor(Color.parseColor("#3eb0ff"));
                mMessageIcon.setImageResource(R.drawable.icon_un_message);
                mMessageTv.setTextColor(Color.parseColor("#000000"));
                break;
            case 1:
                mManagerIcon.setImageResource(R.drawable.icon_un_manager);
                mManagerTv.setTextColor(Color.parseColor("#000000"));
                mMessageIcon.setImageResource(R.drawable.icon_message);
                mMessageTv.setTextColor(Color.parseColor("#3eb0ff"));
                break;
        }
    }


    @Override
    public BasePresenter getPresenter() {
        return new MainPresenter();
    }

    @Override
    public void showLoadProgressDialog(String str) {

    }

    @Override
    public void disDialog() {

    }

    @Override
    public void showToast(String message) {

    }


    private void refreshUIWithMessage() {
        runOnUiThread(new Runnable() {
            public void run() {
                // refresh unread count
                updateUnreadLabel();
                if (currentTabIndex == 1) {
                    //refresh conversation list
                    if (conversationListFragment != null) {
                        conversationListFragment.refresh();
                    }
                }
            }
        });
    }

    /**
     * update unread message count
     */
    public void updateUnreadLabel() {
        int count = getUnreadMsgCountTotal();
        if (count > 0) {
            mRedIcon.setVisibility(View.VISIBLE);
        } else {
            mRedIcon.setVisibility(View.INVISIBLE);
        }
    }

    /**
     * 获取未读消息数目
     */
    public int getUnreadMsgCountTotal() {
        int unreadMsgCountTotal = 0;
        int chatroomUnreadMsgCount = 0;
        unreadMsgCountTotal = EMClient.getInstance().chatManager().getUnreadMessageCount();
        for (EMConversation conversation : EMClient.getInstance().chatManager().getAllConversations().values()) {
            if (conversation.getType() == EMConversation.EMConversationType.ChatRoom)
                chatroomUnreadMsgCount = chatroomUnreadMsgCount + conversation.getUnreadMsgCount();
        }
        return unreadMsgCountTotal - chatroomUnreadMsgCount;
    }

    @Override
    protected void onResume() {
        // unregister this event listener when this activity enters the background
        DemoHelper sdkHelper = DemoHelper.getInstance();
        sdkHelper.pushActivity(this);
        EMClient.getInstance().chatManager().addMessageListener(messageListener);
        super.onResume();
    }

    @Override
    protected void onStop() {
        EMClient.getInstance().chatManager().removeMessageListener(messageListener);
        DemoHelper sdkHelper = DemoHelper.getInstance();
        sdkHelper.popActivity(this);
        super.onStop();
    }

    /**
     * @param ct   上下文
     * @param from 从哪儿跳来的
     */
    public static void startAction(Context ct, String from) {
        Intent itt = new Intent(ct, MainActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        itt.putExtras(bundle);
        ct.startActivity(itt);
    }
}
