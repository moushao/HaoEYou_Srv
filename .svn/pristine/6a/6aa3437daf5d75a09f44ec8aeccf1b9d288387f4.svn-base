package com.haoeyou.srv.fragment;

import android.content.Context;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.cjj.MaterialRefreshLayout;
import com.cjj.MaterialRefreshListener;
import com.google.gson.Gson;
import com.haoeyou.srv.R;
import com.haoeyou.srv.activity.DoctorActivity;
import com.haoeyou.srv.adapter.BaseRecyclerAdapter;
import com.haoeyou.srv.adapter.ContactsAdapter;
import com.haoeyou.srv.adapter.DepartListHolder;
import com.haoeyou.srv.base.BaseFragment;
import com.haoeyou.srv.bean.DepartmentResponseBean;
import com.haoeyou.srv.bean.DoctorRequestBean;
import com.haoeyou.srv.bean.Doctors;
import com.haoeyou.srv.event.ItemListener;
import com.haoeyou.srv.mvp.presenter.BasePresenter;
import com.haoeyou.srv.mvp.presenter.DcotorPresenter;
import com.haoeyou.srv.mvp.view.DcotorFragmentView;
import com.haoeyou.srv.widget.QuickIndexBar;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import butterknife.Bind;
import butterknife.OnClick;
import ca.barrenechea.widget.recyclerview.decoration.DividerDecoration;
import ca.barrenechea.widget.recyclerview.decoration.StickyHeaderDecoration;

public class DoctorFragment extends BaseFragment implements DcotorFragmentView {
    public final static String TAG = "DoctorFragment";
    private Context mContext;
    @Bind(R.id.item_name)
    TextView mItem;
    @Bind(R.id.select_icon)
    ImageView mSelectIcon;
    @Bind(R.id.select_layout)
    FrameLayout mSelectLayout;
    @Bind(R.id.doctor_recycle)
    RecyclerView mDoctorRecycle;
    @Bind(R.id.department_recycle)
    RecyclerView mDepartmentRecycle;
    @Bind(R.id.nothing)
    View mNothing;
    @Bind(R.id.department_select)
    LinearLayout mDepartmentLayout;
    private ContactsAdapter mDoctorAdapter;
    private BaseRecyclerAdapter mDepartmentAdapter;
    @Bind(R.id.qib)
    QuickIndexBar QIBar;
    @Bind(R.id.refresh)
    MaterialRefreshLayout mRefresh;
    private LinearLayoutManager manager;
    ArrayList<Doctors> doctorList = new ArrayList<Doctors>();
    ArrayList<DepartmentResponseBean> departList = new ArrayList<DepartmentResponseBean>();
    private boolean isLoadingMore = false;
    private String filter = "";
    private int page = 1;

    @Override
    public BasePresenter getPresenter() {
        return new DcotorPresenter();
    }

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_doctor;
    }

    @Override
    protected void initInjector() {
        mContext = getActivity();
    }

    @Override
    protected void initEventAndData() {
        initRefresh();
        initRecyclerView();
    }


    @Override
    protected void lazyLoadData() {
        requestDoctorList();
        requestDepartmentList();
    }

    @OnClick({R.id.select_layout, R.id.nothing})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.select_layout:
                mDepartmentLayout.setVisibility(View.VISIBLE);
                break;
            case R.id.nothing:
                mDepartmentLayout.setVisibility(View.INVISIBLE);
                break;
        }
    }

    private void initRefresh() {
        mRefresh.setWaveColor(0xffffffff);
        mRefresh.setIsOverLay(false);
        mRefresh.setWaveShow(true);
        mRefresh.setLoadMore(true);
        mRefresh.setMaterialRefreshListener(new MaterialRefreshListener() {
            @Override
            public void onRefresh(MaterialRefreshLayout materialRefreshLayout) {
                isLoadingMore = false;
                page = 1;
                requestDoctorList();
            }

            @Override
            public void onRefreshLoadMore(MaterialRefreshLayout materialRefreshLayout) {
                isLoadingMore = true;
                page++;
                requestDoctorList();
            }
        });
    }

    private void initRecyclerView() {
        LinearLayoutManager mgrDepart = new LinearLayoutManager(mContext);
        mgrDepart.setOrientation(LinearLayoutManager.VERTICAL);
        mDepartmentRecycle.setLayoutManager(mgrDepart);
        mDepartmentRecycle.addItemDecoration(new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL));
        setDoctorAdapter();
        setDepartmentAdapter();
    }

    public void setDoctorAdapter() {
        //条目间的间隔线
        DividerDecoration divider = new DividerDecoration.Builder(mContext).setHeight(R.dimen.default_divider_height)
                .setPadding(R.dimen.default_divider_padding).setColorResource(R.color.tou_ming).build();

        manager = new LinearLayoutManager(mContext);
        mDoctorRecycle.setHasFixedSize(true);
        mDoctorRecycle.setLayoutManager(manager);
        mDoctorRecycle.addItemDecoration(divider);
        mDoctorAdapter = new ContactsAdapter(mContext, doctorList, new ItemListener<Doctors>() {
            @Override
            public void onItemClick(View view, int postion, Doctors mdata) {
                DoctorActivity.startAction(mContext, DoctorFragment.TAG,doctorList.get(postion));
            }
        });

        //设置悬浮索引
        StickyHeaderDecoration decor = new StickyHeaderDecoration(mDoctorAdapter);
        mDoctorRecycle.setAdapter(mDoctorAdapter);
        mDoctorRecycle.addItemDecoration(decor, 1);

        //侧拉索引改变监听
        QIBar.setOnLetterChangeListener(new QuickIndexBar.OnLetterChangeListener() {
            @Override
            public void onLetterChange(String letter) {

                for (int i = 0; i < doctorList.size(); i++) {

                    if (letter.equals(doctorList.get(i).getName().charAt(0) + "")) {

                        int position = mDoctorAdapter.getPositionForSection(doctorList.get(i).getName().charAt(0));
                        if (position != -1) {
                            //滑动到指定位置
                            manager.scrollToPositionWithOffset(position, 0);
                        }
                        break;
                    }
                }
            }

            @Override
            public void onReset() {

            }
        });
    }

    public void setDepartmentAdapter() {
        if (mDepartmentRecycle == null)
            return;
        if (mDepartmentAdapter == null) {
            mDepartmentAdapter = new BaseRecyclerAdapter(mContext, departList, R.layout.adapter_depart_item, 
                    DepartListHolder.class, new ItemListener<DepartmentResponseBean>() {
                @Override
                public void onItemClick(View view, int position, DepartmentResponseBean mData) {
                    mDepartmentLayout.setVisibility(View.INVISIBLE);
                    mItem.setText(mData.getCn_name());
                    if (0 == position) {
                        filter = "";
                    } else {
                        filter = mData.getCn_name();
                    }
                    isLoadingMore = false;
                    requestDoctorList();
                }
            });
            mDepartmentRecycle.setAdapter(mDepartmentAdapter);
        }
    }

    private void requestDepartmentList() {
        ((DcotorPresenter) mPresenter).getStandardDepartments(mContext);
    }


    private void requestDoctorList() {
        String jsonBean = new Gson().toJson(new DoctorRequestBean(filter, String.valueOf(page), String.valueOf(page 
                == 1 ? 20 : 10)));
        ((DcotorPresenter) mPresenter).getDoctorsPage(mContext, jsonBean);
    }

    @Override
    public void showLoadProgressDialog(String str) {

    }

    @Override
    public void disDialog() {

    }

    @Override
    public void getDoctorPageSuccess(ArrayList<Doctors> mData) {
        if (mRefresh != null) {
            mRefresh.finishRefresh();
            mRefresh.finishRefreshLoadMore();
        }
        if (mData == null || mData.size() == 0)
            return;
        if (doctorList.size() != 0 && !isLoadingMore)
            doctorList.clear();
        doctorList.addAll(mData);
        //对集合进行排序
        Collections.sort(doctorList);
        mDoctorAdapter.notifyDataSetChanged();
    }

    @Override
    public void getStandardDepartmentsSuccess(ArrayList<DepartmentResponseBean> mData) {
        if (mData == null || mData.size() == 0)
            return;
        if (departList.size() == 0)
            departList.add(new DepartmentResponseBean("全部", "all"));
        departList.addAll(mData);
        mDepartmentAdapter.notifyDataSetChanged();
    }

    @Override
    public void getDoctorPageFailed() {
        if (mRefresh != null) {
            mRefresh.finishRefresh();
            mRefresh.finishRefreshLoadMore();
        }
    }
}
