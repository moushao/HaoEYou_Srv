package com.haoeyou.srv.activity;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.cjj.MaterialRefreshLayout;
import com.cjj.MaterialRefreshListener;
import com.google.gson.Gson;
import com.haoeyou.srv.R;
import com.haoeyou.srv.adapter.BaseRecyclerAdapter;
import com.haoeyou.srv.adapter.UserListHolder;
import com.haoeyou.srv.base.BaseActivity;
import com.haoeyou.srv.bean.User;
import com.haoeyou.srv.bean.UserRequestBean;
import com.haoeyou.srv.cache.UserCacheManager;
import com.haoeyou.srv.common.Common;
import com.haoeyou.srv.event.ItemListener;
import com.haoeyou.srv.fragment.UserFragment;
import com.haoeyou.srv.mvp.presenter.BasePresenter;
import com.haoeyou.srv.mvp.presenter.UserFragmentPresenter;
import com.haoeyou.srv.mvp.view.UserFragmentView;

import java.util.ArrayList;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class UserSearchActivity extends BaseActivity implements UserFragmentView {
    private final static String TAG = "UserSearchActivity";
    @Bind(R.id.title_back)
    ImageView mTitleBack;
    @Bind(R.id.title_tv)
    TextView mTitleTv;
    @Bind(R.id.more_tv)
    TextView mMoreTv;
    @Bind(R.id.more_icon)
    ImageView mMoreIcon;
    @Bind(R.id.filter)
    EditText mFilter;
    @Bind(R.id.user_recycle)
    RecyclerView mUserRecycle;
    @Bind(R.id.refresh)
    MaterialRefreshLayout mRefresh;
    private Context mContext;
    private String filter = "";
    private int page = 1;
    private boolean isLoadingMore;
    private BaseRecyclerAdapter mUserAdapter;
    ArrayList<User> userList = new ArrayList<User>();

    @Override
    protected int getLayoutId() {
        return R.layout.activity_user_search;
    }

    @Override
    protected void initInjector() {
        mContext = this;
    }

    @Override
    public BasePresenter getPresenter() {
        return new UserFragmentPresenter();
    }

    @Override
    protected void initEventAndData() {
        mTitleTv.setText("搜索");
        initTextWatcher();
        initRefreshView();
        initRecyclerView();
    }

    @OnClick(R.id.title_back)
    public void onViewClicked() {
        finish();
    }

    private void initTextWatcher() {
        mFilter.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                filter = mFilter.getText().toString();
                if (TextUtils.isEmpty(filter)) {
                    userList.clear();
                    mUserAdapter.notifyDataSetChanged();
                } else {
                    requestUserList();
                }
            }
        });
    }

    private void initRecyclerView() {
        LinearLayoutManager mgrDepart = new LinearLayoutManager(mContext);
        mgrDepart.setOrientation(LinearLayoutManager.VERTICAL);
        mUserRecycle.setLayoutManager(mgrDepart);
        mUserRecycle.addItemDecoration(new DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL));
        setDepartmentAdapter();
    }

    private void initRefreshView() {
        mRefresh.setWaveColor(0xffffffff);
        mRefresh.setIsOverLay(false);
        mRefresh.setLoadMore(true);
        mRefresh.setWaveShow(true);
        mRefresh.setMaterialRefreshListener(new MaterialRefreshListener() {
            @Override
            public void onRefresh(MaterialRefreshLayout materialRefreshLayout) {
                if (TextUtils.isEmpty(filter))
                    return;
                isLoadingMore = false;
                page = 1;

                requestUserList();
            }

            @Override
            public void onRefreshLoadMore(MaterialRefreshLayout materialRefreshLayout) {
                isLoadingMore = true;
                page++;
                requestUserList();
            }
        });
    }

    public void setDepartmentAdapter() {
        if (mUserRecycle == null)
            return;
        if (mUserAdapter == null) {
            mUserAdapter = new BaseRecyclerAdapter(mContext, userList, R.layout.adapter_user_item, UserListHolder
                    .class, new ItemListener<User>() {
                @Override
                public void onItemClick(View view, int position, User mData) {
                    UserArchivesActivity.startAction(mContext, UserFragment.TAG, mData);
                }
            });
            mUserRecycle.setAdapter(mUserAdapter);
        }
    }

    private void requestUserList() {
        String jsonBean = new Gson().toJson(new UserRequestBean(filter, String.valueOf(page), String.valueOf(page == 
                1 ? 20 : 10), Common.TOKEN));
        ((UserFragmentPresenter) mPresenter).getUsersPage(mContext, jsonBean);
    }

    /**
     * @param ct   上下文
     * @param from 从哪儿跳来的
     */
    public static void startAction(Context ct, String from) {
        Intent itt = new Intent(ct, UserSearchActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        itt.putExtras(bundle);
        ct.startActivity(itt);
    }

    @Override
    public void showLoadProgressDialog(String str) {

    }

    @Override
    public void disDialog() {

    }

    @Override
    public void getUserPageSuccess(ArrayList<User> mData) {
        if (mRefresh != null) {
            mRefresh.finishRefresh();
            mRefresh.finishRefreshLoadMore();
        }
        if (mData == null || mData.size() == 0)
            return;
        if (userList.size() != 0 && !isLoadingMore)
            userList.clear();
        for (User user : mData) {
            UserCacheManager.save(user);
            userList.add(user);
        }
        mUserAdapter.notifyDataSetChanged();
    }

    @Override
    public void getUserPageFailed(String message) {
        if (isLoadingMore)
            page--;
        if (mRefresh != null) {
            mRefresh.finishRefresh();
            mRefresh.finishRefreshLoadMore();
        }
        showBaseMessageDialog(message);
    }
}
